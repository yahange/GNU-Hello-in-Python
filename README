 GNU Hello 2.10 in Python 1.1.2

This is a Python implementation of the GNU Hello program (version 2.10). The program prints a friendly, customizable greeting to the terminal, offering options for traditional messages or custom greetings.

## Features

- **Traditional Greeting**: Prints "hello, world".
- **Customizable Greeting**: Allows the user to specify a custom greeting message using the `-g` or `--greeting` option.
- **Version Info**: Displays version information using the `-v` or `--version` option.
- **Help message**: Displays help message using the `-h` or `--help` option.

## Requirements

- Python 3.6 or newer

## Usage

Run the script with Python:

```bash
python hello.py [OPTIONS]
```

### Options

- `-v`, `--version`: Display version information.
- `-t`, `--traditional`: Use the traditional greeting "hello, world".
- `-g TEXT`, `--greeting TEXT`: Use `TEXT` as the greeting message.
- `-h`, `--help`: Show help information for the program.

### Examples

1. Print the traditional greeting:

    ```bash
    python hello.py --traditional
    ```

    Output:
    ```
    hello, world
    ```

2. Print a custom greeting:

    ```bash
    python hello.py --greeting "Hello, Pythonista!"
    ```

    Output:
    ```
    Hello, Pythonista!
    ```

3. Display version information:

    ```bash
    python hello.py --version
    ```

    Output:
    ```
    GNU Hello 2.10 in Python version 1.1.2

    ```

4. Display help message:

    ```bash
    python hello.py --help
    ```

    Output:
    ```
    usage: hello.py [-h] [-v] [-t] [-g TEXT]

    Print a friendly, customizable greeting.

    options:
      -h, --help            show this help message and exit
      -v, --version         show program's version number and exit
      -t, --traditional     use traditional greeting
      -g TEXT, --greeting TEXT
                            use TEXT as the greeting message
    ```

## Build

To build the project into a standalone executable, use the provided `build.py` script.

### Build Instructions

1. **Ensure you have PyInstaller installed**:
   ```bash
   pip install pyinstaller
   ```

2. **Run the `build.py` script**:
   This script will use PyInstaller to generate a single executable file.

   ```bash
   python build.py
   ```

   After running the script, the executable will be located in the `dist/` directory.

### About `build.py`

The `build.py` script is designed to simplify the process of packaging this project into an executable. It uses **PyInstaller** to bundle the Python script (`hello.py`) into a standalone executable, which can be run without requiring a Python environment.

- **Options**:
  - `--onefile`: Creates a single executable file.
  - `--name=hello`: Specifies the name of the output executable.
```
